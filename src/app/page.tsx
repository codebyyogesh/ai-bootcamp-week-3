"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/JvkQ3eE7u7w
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState } from "react";
import { generateImage as generateNewImage, describe } from "@/lib/ai";

const themes = {
  nature:
    "Serene Sunrise: A canvas alive with the soft hues of dawn breaking over a tranquil lake, where mist gently rises to meet the first rays of sunlight filtering through towering pines.",
  animals:
    "Wild Symphony: A menagerie of African wildlife congregates at a watering hole, under the watchful gaze of a majestic lion, amidst a chorus of chirping crickets and rustling leaves.",
  city: "Urban Rhapsody: Skyscrapers pierce the sky in a bustling metropolis, their glass facades reflecting the myriad lights of neon signs and bustling streets below.",
  abstract:
    "Ethereal Fusion: Swirling hues of azure and emerald converge in a dance of light and shadow, evoking a sense of cosmic energy and ethereal movement.",
};

export default function ImageGenerator() {
  const [theme, setTheme] = useState("nature");
  const [image, setImage] = useState<string | undefined>(undefined);
  const [loading, setLoading] = useState(false);
  const [prompt, setPrompt] = useState(themes["nature"]);
  const [describing, setDescribing] = useState(false);
  const [description, setDescription] = useState<string | undefined>(undefined);
  const [imageParams, setImageParams] = useState({
    size: "1024x1024",
    quality: "standard",
    style: "natural",
  });

  const generateDescription = (theme: string): string => {
    return (themes as any)[theme] ?? themes["nature"];
  };
  const handleThemeSelect = (selectedTheme: any) => {
    setTheme(selectedTheme);
    setPrompt(generateDescription(selectedTheme));
  };
  const generatePaintingDescription = async () => {
    if (image) {
      setDescribing(true);
      setDescription(await describe(image));
      setDescribing(false);
    } else setDescription("Please generate an image first.");
  };

  const generateImage = async () => {
    setLoading(true);
    setDescription(undefined);
    const newImage = await generateNewImage({
      prompt: prompt ?? "A beautiful painting of nature",
      ...imageParams,
    });
    console.log("Generated Image", newImage);
    if (newImage.image) setImage(newImage.image);
    else if (newImage.error) {
      console.error(newImage.error);
      setDescription(
        "Failed to generate image. Please try again." + newImage.error?.message
          ? newImage.error.message
          : ""
      );
    }
    setLoading(false);
  };

  return (
    <div className="max-w-6xl mx-auto p-16 flex flex-col md:flex-row bg-yellow-200 text-yellow-800">
      <div className="md:w-3/4 md:pr-8 mb-8 md:mb-0">
        <div className="bg-gray-200 h-96 rounded-lg flex items-center justify-center">
          <span>
            {!image && "Image Preview"}
            {image && (
              <img src={image} alt="Preview" className="h-96 sbg-[#30363D]" />
            )}
          </span>
        </div>
        <div className="flex mt-4">
          {image && (
            <button
              onClick={generatePaintingDescription}
              className=" text-white font-medium py-2 px-4 rounded-md h-10 bg-yellow-500 text-white hover:bg-yellow-600"
            >
              {describing
                ? "Generating description..."
                : "Generate Description"}
            </button>
          )}
          <button
            onClick={generateImage}
            className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md h-10 ml-4 bg-yellow-500 text-white hover:bg-yellow-600"
          >
            {loading ? "Generating image..." : "Generate Image"}
          </button>
        </div>
        {description && (
          <div className="mt-4">
            <label
              htmlFor="imageDescription"
              className="block font-medium mb-2"
            >
              Image Description:
            </label>
            <textarea
              id="imageDescription"
              className="border rounded-md px-4 py-2 w-full h-32"
              value={description}
            />
          </div>
        )}
      </div>
      <div className="md:w-1/2">
        <h1 className="text-3xl font-bold mb-4 text-yellow-600">
          Painting Description Generator
        </h1>
        <div className="mb-8">
          <label htmlFor="theme" className="block font-medium mb-2">
            Select a painting theme:
          </label>
          <select
            id="theme"
            value={theme}
            onChange={(e) => handleThemeSelect(e.target.value)}
            className="border rounded-md px-4 py-2 w-full "
          >
            <option value="">Select a theme</option>
            <option value="nature">Nature</option>
            <option value="animals">Animals</option>
            <option value="city">City</option>
            <option value="abstract">Abstract</option>
          </select>
        </div>
        <div className="mb-8">
          <label htmlFor="description" className="block font-medium mb-2">
            Painting Prompt:
          </label>
          <textarea
            id="description"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="border rounded-md px-4 py-2 w-full h-32"
          />
        </div>
        <div className="mb-8">
          <div className="mt-4">
            <label htmlFor="size" className="block font-medium mb-2">
              Image Size:
            </label>
            <select
              id="size"
              value={imageParams.size}
              onChange={(e) =>
                setImageParams({ ...imageParams, size: e.target.value })
              }
              className="border rounded-md px-4 py-2 w-full"
            >
              <option value="1024x1024">1024x1024</option>
              <option value="1792x1024">1792x1024</option>
              <option value="1024x1792">1024x1792</option>
              <option value="1024x1792">256x256</option>
            </select>
          </div>
          <div className="mt-4">
            <label htmlFor="style" className="block font-medium mb-2">
              Image Style:
            </label>
            <select
              id="style"
              value={imageParams.style}
              onChange={(e) =>
                setImageParams({ ...imageParams, style: e.target.value })
              }
              className="border rounded-md px-4 py-2 w-full"
            >
              <option value="natural">Natural</option>
              <option value="vivid">Vivid</option>
            </select>
          </div>
          <div className="mt-4">
            <label htmlFor="quality" className="block font-medium mb-2">
              Image Quality:
            </label>
            <select
              id="quality"
              value={imageParams.quality}
              onChange={(e) =>
                setImageParams({ ...imageParams, quality: e.target.value })
              }
              className="border rounded-md px-4 py-2 w-full"
            >
              <option value="Standard">Standard</option>
              <option value="HD">HD</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  );
}
